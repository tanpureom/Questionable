const { QuestionsCollection, validateQuestions } = require('../models/QuestionsModel.js');
const { UserCollection } = require('../models/UserModel.js');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

const handleQuestions = async (req, res) => {
  try {
    const { filename, questions, username } = req.body;

    if (!filename || !questions) {
      return res.status(400).json({
        message: "Filename or Questions are empty..!!!",
        success: false
      })
    }

    const user = await UserCollection.findOne({ username });

    if (!user) {
      return res.status(400).json({
        message: "User does not exits..!!!",
        success: false
      })
    }

    const result = validateQuestions({ filename, questionText: questions });

    if (result) {
      return res.status(400).json({
        message: result.details[0].message,
        success: false
      })
    }

    const uploadDir = path.join(__dirname, '../uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }


    // Create PDF
    const pdfPath = path.join(uploadDir, `${filename}.pdf`);
    const doc = new PDFDocument();
    const stream = fs.createWriteStream(pdfPath);

    doc.pipe(stream);

    doc.fontSize(12).text(`Generated by: ${user.username}`, { align: 'left' });
    doc.moveDown();
    doc.fontSize(16).text(`Question Paper: ${filename}`, { underline: true });
    doc.moveDown();
    doc.fontSize(12).text(questions);

    doc.end();


    stream.on('finish', async () => {

      const Questions = new QuestionsCollection({
        user: user._id,
        filename,
        questionText: questions
      })

      await Questions.save();

      // save in user collection
      user.questionGeneratedByUser.push(Questions._id);
      await user.save();

      // return res.status(200).json({
      //   message: "PDF generated successfully..!!!",
      //   success: true
      // })

      res.download(pdfPath, `${filename}.pdf`, (err) => {
        if (err) {
          console.error('Error sending PDF:', err);
          return res.status(500).json({ message: 'Error downloading PDF..!!!', success: false });
        }
      });
    })

    stream.on('error', (error) => {
      console.log(error);
      return res.status(500).json({
        message: "Error generating PDF..!!!",
        success: false
      })
    })

  } catch (error) {
    if (error.response) {
      res.status(500).json({
        message: error.response.data?.message || 'Server responded with an error',
        success: false,
      });
    } else if (error.request) {
      res.status(500).json({
        message: 'No response received from the server',
        success: false,
      });
    } else {
      res.status(500).json({
        message: error.message || 'An unknown error occurred',
        success: false,
      });
    }
  }
}


const fetchQuestionPapers = async (req, res) => {
  try {
    const { username } = req.body;

    // ✅ Step 1: Validate Input
    if (!username) {
      return res.status(400).json({
        message: "Username is required.",
        success: false,
      });
    }

    // ✅ Step 2: Check if User Exists
    const user = await UserCollection.findOne({ username });
    if (!user) {
      return res.status(404).json({
        message: "User not found.",
        success: false,
      });
    }

    // ✅ Step 3: Fetch Question Papers
    const questionPapers = await QuestionsCollection.find({ user: user._id });

    if (questionPapers.length === 0) {
      return res.status(404).json({
        message: "No question papers found for this user.",
        success: false,
      });
    }

    // ✅ Step 4: Return Data
    res.status(200).json({
      message: "Question papers fetched successfully.",
      success: true,
      data: questionPapers,
    });

  } catch (error) {
    console.error('Error fetching question papers:', error);
    res.status(500).json({
      message: error.message || "Internal server error.",
      success: false,
    });
  }
}

const deleteQuestionPaper = async (req, res) => {
  try {
    const { FileId } = req.body;

    // Validate the FileId
    if (!FileId) {
      return res.status(400).json({ success: false, message: "FileId is required" });
    }

    // Find and delete the question paper
    const deletedPaper = await QuestionsCollection.findByIdAndDelete(FileId);

    if (!deletedPaper) {
      return res.status(404).json({ success: false, message: "Question Paper not found" });
    }

    // Remove reference from UserCollection
    await UserCollection.updateOne(
      { _id: deletedPaper.user },
      { $pull: { questionGeneratedByUser: FileId } }
    );


    res.status(200).json({ success: true, message: "Question Paper deleted successfully", data: deletedPaper });
  } catch (error) {
    console.error("Error deleting question paper:", error);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
};


const downloadQuestionPaper = async (req, res) => {
  try {
    const { fileid } = req.params;

    if (!fileid) {
      return res.status(400).json({ success: false, message: "FileID is required" });
    }

    // Find the question paper in the database
    const questionPaper = await QuestionsCollection.findById(fileid);

    if (!questionPaper) {
      return res.status(404).json({ success: false, message: "Question Paper not found" });
    }

    const filePath = path.resolve(__dirname, '../uploads', `${questionPaper.filename}.pdf`);

    // Check if the file exists on the server
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({ success: false, message: "File not found on server" });
    }

    // Send the file to the client for download
    res.download(filePath, `${questionPaper.filename}.pdf`, (err) => {
      if (err) {
        console.error("Error during file download:", err);
        return res.status(500).json({ success: false, message: "Error downloading file" });
      }
    });

  } catch (error) {
    console.error("Error in downloadQuestionPaper:", error);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
};



module.exports = {
  handleQuestions,
  fetchQuestionPapers,
  deleteQuestionPaper,
  downloadQuestionPaper
}